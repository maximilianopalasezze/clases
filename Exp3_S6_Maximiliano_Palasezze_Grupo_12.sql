CREATE TABLE REGION (
  ID_REGION      NUMBER(2)      PRIMARY KEY,
  NOMBRE         VARCHAR2(50)   NOT NULL
);

/* Comunas: identidad desde 1101, incremento 1 */
CREATE TABLE COMUNA (
  ID_COMUNA      NUMBER(6) GENERATED ALWAYS AS IDENTITY
                 (START WITH 1101 INCREMENT BY 1) PRIMARY KEY,
  NOMBRE         VARCHAR2(60)   NOT NULL,
  ID_REGION      NUMBER(2)      NOT NULL,
  CONSTRAINT COMUNA_REGION_FK
    FOREIGN KEY (ID_REGION) REFERENCES REGION(ID_REGION)
);

/* Ciudades (referencian comuna) */
CREATE TABLE CIUDAD (
  ID_CIUDAD      NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  NOMBRE         VARCHAR2(60)   NOT NULL,
  ID_COMUNA      NUMBER(6)      NOT NULL,
  CONSTRAINT CIUDAD_COMUNA_FK
    FOREIGN KEY (ID_COMUNA) REFERENCES COMUNA(ID_COMUNA)
);

/* Especialidades médicas: identidad automática */
CREATE TABLE ESPECIALIDAD (
  ID_ESPECIALIDAD  NUMBER(6) GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  NOMBRE           VARCHAR2(60) NOT NULL
);

/* Vías de administración (oral, tópica, etc.) */
CREATE TABLE VIA_ADMINISTRACION (
  ID_VIA         NUMBER(3)      PRIMARY KEY,
  NOMBRE         VARCHAR2(40)   NOT NULL
);

/* Tipos de medicamento (GENÉRICO/MARCA…) */
CREATE TABLE TIPO_MEDICAMENTO (
  ID_TIPO_MED    NUMBER(3)      PRIMARY KEY,
  NOMBRE         VARCHAR2(40)   NOT NULL
);

/* Tipos de receta*/
CREATE TABLE TIPO_RECETA (
  ID_TIPO_RECETA NUMBER(3)      PRIMARY KEY,
  NOMBRE         VARCHAR2(20)   NOT NULL,
  CONSTRAINT TIPO_RECETA_UK UNIQUE (NOMBRE)
);

/* Diagnósticos */
CREATE TABLE DIAGNOSTICO (
  ID_DIAGNOSTICO NUMBER(6)      PRIMARY KEY,
  NOMBRE         VARCHAR2(120)  NOT NULL
);

/* Bancos */
CREATE TABLE BANCO (
  COD_BANCO      NUMBER(2)      PRIMARY KEY,
  NOMBRE         VARCHAR2(25)   NOT NULL
);

/* -----------------------------------------------------------
   2) ENTIDADES PRINCIPALES
   ----------------------------------------------------------- */
/* Pacientes*/
CREATE TABLE PACIENTE (
  RUT_PAC        NUMBER(8)      PRIMARY KEY,
  DV_PAC         CHAR(1)        NOT NULL,
  NOMBRES        VARCHAR2(100)   NOT NULL,
  APELLIDOS      VARCHAR2(100)   NOT NULL,
  FECHA_NACIMIENTO          DATE,          
  TELEFONO       VARCHAR2(20),
  CALLE          VARCHAR2(60),
  NUMERACION     VARCHAR2(10),
  ID_CIUDAD      NUMBER(6),
  ID_COMUNA      NUMBER(6),
  ID_REGION      NUMBER(2),
  CONSTRAINT PACIENTE_DV_CK CHECK (REGEXP_LIKE(DV_PAC, '^[0-9K]$')),
  CONSTRAINT PACIENTE_CIUDAD_FK FOREIGN KEY (ID_CIUDAD) REFERENCES CIUDAD(ID_CIUDAD),
  CONSTRAINT PACIENTE_COMUNA_FK FOREIGN KEY (ID_COMUNA) REFERENCES COMUNA(ID_COMUNA),
  CONSTRAINT PACIENTE_REGION_FK FOREIGN KEY (ID_REGION) REFERENCES REGION(ID_REGION)
);

/* Médicos (teléfono único + DV) */
CREATE TABLE MEDICO (
  RUT_MED        NUMBER(8)      PRIMARY KEY,
  DV_MED         CHAR(1)        NOT NULL,
  NOMBRES        VARCHAR2(25)   NOT NULL,
  APELLIDOS      VARCHAR2(25)   NOT NULL,
  TELEFONO       VARCHAR2(20)   NOT NULL,
  ID_ESPECIALIDAD NUMBER(6)     NOT NULL,
  CONSTRAINT MEDICO_DV_CK CHECK (REGEXP_LIKE(DV_MED, '^[0-9K]$')),
  CONSTRAINT MEDICO_TEL_UK UNIQUE (TELEFONO),
  CONSTRAINT MEDICO_ESP_FK FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES ESPECIALIDAD(ID_ESPECIALIDAD)
);

/* Digitadores (DV) */
CREATE TABLE DIGITADOR (
  RUT_DIG        NUMBER(8)      PRIMARY KEY,
  DV_DIG         CHAR(1)        NOT NULL,
  NOMBRE        VARCHAR2(25)   NOT NULL,
  APELLIDO      VARCHAR2(25)   NOT NULL,
  CONSTRAINT DIGITADOR_DV_CK CHECK (REGEXP_LIKE(DV_DIG, '^[0-9K]$'))
);

/* Medicamentos (con stock y dosis recomendada) */
CREATE TABLE MEDICAMENTO (
  COD_MEDICAMENTO   NUMBER(7)     PRIMARY KEY,
  NOMBRE            VARCHAR2(60)  NOT NULL,
  ID_TIPO_MED       NUMBER(3)     NOT NULL,
  ID_VIA            NUMBER(3)     NOT NULL,
  DOSIS_RECOMENDADA VARCHAR2(80)  NOT NULL,
  STOCK_DISPONIBLE  NUMBER(7)     DEFAULT 0 NOT NULL,
  CONSTRAINT MED_STOCK_CK CHECK (STOCK_DISPONIBLE >= 0),
  CONSTRAINT MED_TIPO_FK FOREIGN KEY (ID_TIPO_MED) REFERENCES TIPO_MEDICAMENTO(ID_TIPO_MED),
  CONSTRAINT MED_VIA_FK  FOREIGN KEY (ID_VIA)       REFERENCES VIA_ADMINISTRACION(ID_VIA)
);

/* Recetas (1 diagnóstico por receta; 1..N medicamentos por DOSIS; 1..N pagos) */
CREATE TABLE RECETA (
  COD_RECETA       NUMBER(7)     PRIMARY KEY,
  OBSERVACIONES    VARCHAR2(500),
  FECHA_EMISION    DATE          NOT NULL,
  FECHA_VENCIMIENTO DATE,
  RUT_DIG          NUMBER(8)     NOT NULL,
  RUT_PAC          NUMBER(8)     NOT NULL,
  ID_DIAGNOSTICO   NUMBER(6)     NOT NULL,
  RUT_MED          NUMBER(8)     NOT NULL,
  ID_TIPO_RECETA   NUMBER(3)     NOT NULL,
  CONSTRAINT RECETA_DIG_FK  FOREIGN KEY (RUT_DIG)      REFERENCES DIGITADOR(RUT_DIG),
  CONSTRAINT RECETA_PAC_FK  FOREIGN KEY (RUT_PAC)      REFERENCES PACIENTE(RUT_PAC),
  CONSTRAINT RECETA_DIAG_FK FOREIGN KEY (ID_DIAGNOSTICO) REFERENCES DIAGNOSTICO(ID_DIAGNOSTICO),
  CONSTRAINT RECETA_MED_FK  FOREIGN KEY (RUT_MED)      REFERENCES MEDICO(RUT_MED),
  CONSTRAINT RECETA_TIPO_FK FOREIGN KEY (ID_TIPO_RECETA) REFERENCES TIPO_RECETA(ID_TIPO_RECETA)
);

/* Detalle receta-medicamento con pauta específica de esa receta */
CREATE TABLE DOSIS (
  COD_MEDICAMENTO  NUMBER(7)     NOT NULL,
  COD_RECETA       NUMBER(7)     NOT NULL,
  DESCRIPCION_DOSIS VARCHAR2(120) NOT NULL,
  CONSTRAINT DOSIS_PK PRIMARY KEY (COD_MEDICAMENTO, COD_RECETA),
  CONSTRAINT DOSIS_MED_FK    FOREIGN KEY (COD_MEDICAMENTO) REFERENCES MEDICAMENTO(COD_MEDICAMENTO),
  CONSTRAINT DOSIS_RECETA_FK FOREIGN KEY (COD_RECETA)      REFERENCES RECETA(COD_RECETA)
);

/* Pagos (una receta puede tener varios pagos) */
CREATE TABLE PAGO (
  COD_BOLETA       NUMBER(10)    PRIMARY KEY,
  COD_RECETA       NUMBER(7)     NOT NULL,
  FECHA_PAGO       DATE          NOT NULL,
  MONTO_PAGADO     NUMBER(12,2)  NOT NULL,
  COD_BANCO        NUMBER(2),    -- opcional, si aplica tarjeta/transferencia
  CONSTRAINT PAGO_RECETA_FK FOREIGN KEY (COD_RECETA) REFERENCES RECETA(COD_RECETA),
  CONSTRAINT PAGO_BANCO_FK  FOREIGN KEY (COD_BANCO)  REFERENCES BANCO(COD_BANCO),
  CONSTRAINT PAGO_MONTO_CK  CHECK (MONTO_PAGADO > 0)
);

/* -----------------------------------------------------------
   3)carga mínima de catálogos de dominio
   ----------------------------------------------------------- */
INSERT INTO TIPO_RECETA (ID_TIPO_RECETA, NOMBRE) VALUES (1, 'DIGITAL');
INSERT INTO TIPO_RECETA (ID_TIPO_RECETA, NOMBRE) VALUES (2, 'MAGISTRAL');
INSERT INTO TIPO_RECETA (ID_TIPO_RECETA, NOMBRE) VALUES (3, 'RETENIDA');
INSERT INTO TIPO_RECETA (ID_TIPO_RECETA, NOMBRE) VALUES (4, 'GENERAL');
INSERT INTO TIPO_RECETA (ID_TIPO_RECETA, NOMBRE) VALUES (5, 'VETERINARIA');

INSERT INTO TIPO_MEDICAMENTO (ID_TIPO_MED, NOMBRE) VALUES (1, 'GENERICO');
INSERT INTO TIPO_MEDICAMENTO (ID_TIPO_MED, NOMBRE) VALUES (2, 'MARCA');

COMMIT;

/* ===========================================================
   CASO 2 – AJUSTES POSTERIORES (usar ALTER)
   =========================================================== */

/* a) Precio unitario en MEDICAMENTO (1.000 a 2.000.000) */
ALTER TABLE MEDICAMENTO
  ADD (PRECIO_UNITARIO NUMBER(12,2));

ALTER TABLE MEDICAMENTO
  ADD CONSTRAINT MED_PRECIO_CK
  CHECK (PRECIO_UNITARIO BETWEEN 1000 AND 2000000);

/* b) Método de pago (EFECTIVO, TARJETA, TRANSFERENCIA) */
ALTER TABLE PAGO
  ADD (METODO_PAGO VARCHAR2(15));

ALTER TABLE PAGO
  ADD CONSTRAINT PAGO_METODO_CK
  CHECK (METODO_PAGO IN ('EFECTIVO','TARJETA','TRANSFERENCIA'));

COMMIT;